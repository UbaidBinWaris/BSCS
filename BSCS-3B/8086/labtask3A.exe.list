EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
labtask3A.exe -- emu8086 assembler version: 4.08  
 
[ 3/11/2024  --  12:54:13 AM ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       .model small
[   2]        :                                       .data
[   3]    0000: 00                                    num1 db ?
[   4]    0001: 00                                    num2 db ?
[   5]    0002: 00                                    result db ?
[   6]    0003: 45 6E 74 65 72 20 74 68 65 20 66 69   msg1 db "Enter the first number: $"
                72 73 74 20 6E 75 6D 62 65 72 3A 20 
                24                                  
[   7]    001C: 0A 0D 45 6E 74 65 72 20 74 68 65 20   msg2 db 10d, 0Dh, "Enter the second number: $"
                73 65 63 6F 6E 64 20 6E 75 6D 62 65 
                72 3A 20 24                         
[   8]    0038: 0A 0D 53 75 6D 3A 20 24               resultMsg db 10d, 13d, "Sum: $"
[   9]        :                                       
[  10]        :                                       .code
[  11]    0040: B8 00 00                              mov ax, @data
[  12]    0043: 8E D8                                 mov ds, ax
[  13]        :                                       
[  14]    0045: B4 09                                 mov ah, 09h
[  15]    0047: BA 03 00                              lea dx, msg1
[  16]    004A: CD 21                                 int 21h
[  17]        :                                       
[  18]        :                                       ; Read the first number
[  19]    004C: B4 01                                 mov ah, 01h
[  20]    004E: CD 21                                 int 21h
[  21]    0050: 2C 30                                 sub al, 48d
[  22]    0052: A2 00 00                              mov num1, al
[  23]        :                                       
[  24]        :                                       ; Prompt the user for the second number
[  25]    0055: B4 09                                 mov ah, 09h
[  26]    0057: BA 1C 00                              lea dx, msg2
[  27]    005A: CD 21                                 int 21h
[  28]        :                                       
[  29]        :                                       ; Read the second number
[  30]    005C: B4 01                                 mov ah, 01h
[  31]    005E: CD 21                                 int 21h
[  32]    0060: 2C 30                                 sub al, 30h
[  33]    0062: A2 01 00                              mov num2, al
[  34]        :                                       
[  35]        :                                       ; Calculate the sum
[  36]    0065: A0 00 00                              mov al, num1
[  37]    0068: 02 06 01 00                           add al, num2
[  38]    006C: A2 02 00                              mov result, al
[  39]        :                                       
[  40]        :                                       ; Display the result
[  41]    006F: B4 09                                 mov ah, 09h
[  42]    0071: BA 38 00                              lea dx, resultMsg
[  43]    0074: CD 21                                 int 21h
[  44]        :                                       
[  45]    0076: 8A 16 02 00                           mov dl, result
[  46]    007A: 80 C2 30                              add dl, '0'
[  47]    007D: B4 02                                 mov ah, 02h
[  48]    007F: CD 21                                 int 21h
[  49]        :                                       
[  50]    0081: B4 4C                                 mov ah, 4Ch
[  51]    0083: CD 21                                 int 21h
[  52]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 85      -   bytes on last page (l.byte)
0003: 00      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 00      -   SP - stack pointer (h.byte)
0012: C6      -   check sum (l.byte)
0013: 01      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 04      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 04      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
